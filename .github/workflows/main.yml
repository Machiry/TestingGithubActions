# This is a basic workflow to help you get started with Actions

name: Nightly Sanity Tests

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: push

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    env:
      builddir: "b/ninja"
      vsftpddir: "vsftpd_testing"
      vsftpdurl: "https://security.appspot.com/downloads/vsftpd-3.0.3.tar.gz"
    
    # The type of OS that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout our repository
      uses: actions/checkout@v2
      with:
        repository: plum-umd/checkedc-clang
        ref: BigRefactor
        path: depsfolder/checkedc-clang
      
    # Install all the required dependencies  
    - name: Install dependencies
      run : |
        sudo apt-get update
        sudo apt-get install libboost-all-dev git python cmake build-essential wget tar ninja-build liblzma-dev libreadline-dev
        
    # clone and install bear
    # Needed for generating compile_commands.json    
    - name: Clone Bear
      uses: actions/checkout@v2
      with:
        repository: rizsotto/Bear
        path: depsfolder/bear
    - name: Install Bear
      run: |
        mkdir -p ${{runner.workspace}}/depsfolder/bear
        cd ${{runner.workspace}}/depsfolder/bear
        cmake ${{github.workspace}}/depsfolder/bear
        make all
        sudo make install

    # clone Checked C headers
    - name: Clone Checked C headers
      uses: actions/checkout@v2
      with:
        repository: microsoft/checkedc
        path: ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc
      
    - name: Check Checked C headers
      run: |
        ls ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc
        
    # Build cconv-standadlone
    - name: Build cconv-standalone
      run: |
        mkdir -p ${{runner.workspace}}/${{env.builddir}}
        cd ${{runner.workspace}}/${{env.builddir}}
        cmake -G Ninja -DLLVM_TARGETS_TO_BUILD=X86 -DLLVM_ENABLE_RTTI=ON -DCMAKE_BUILD_TYPE="MinSizeRel" -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra" ${{github.workspace}}/depsfolder/checkedc-clang/llvm
        ninja cconv-standalone
        ninja clang

    - name: Build vsftpd
      run: |
        mkdir ${{runner.workspace}}/${{env.vsftpddir}}
        cd ${{runner.workspace}}/${{env.vsftpddir}}
        wget ${{env.vsftpdurl}}
        tar -xvzf vsftpd-3.0.3.tar.gz
        cd vsftpd-3.0.3
        bear make
        ls compile_commands.json
        pwd
        
    - name: Testing vsftpd
      run: |
        cd ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils/cc_conv
        python convert_project.py --includeDir ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc/include -p ${{runner.workspace}}/${{env.builddir}}/bin/cconv-standalone -pr ${{runner.workspace}}/${{env.vsftpddir}}/vsftpd-3.0.3
    
    - name: Clone Checkedc-eval
      uses: actions/checkout@v2
      with:
        repository: plum-umd/checkedc-eval
        path: depsfolder/checkedc-eval
        token: ${{secrets.MACHIRY_KEY_PRIVATE_ACCESS}}
        submodules: true
    
    - name: Build PtrDist
      run: |
        cd ${{github.workspace}}/depsfolder/checkedc-eval
        tar -xvzf ptrdist-1.1.tar.gz
        cd ptrdist-1.1
        ./RUNGCC.sh
    
    - name: Test anagram (PtrDist)
      run: |
        cd ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils/cc_conv
        python convert_project.py --includeDir ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc/include -p ${{runner.workspace}}/${{env.builddir}}/bin/cconv-standalone -pr ${{github.workspace}}/depsfolder/checkedc-eval/ptrdist-1.1/anagram
        
    - name: Test bc (PtrDist)
      run: |
        cd ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils/cc_conv
        python convert_project.py --includeDir ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc/include -p ${{runner.workspace}}/${{env.builddir}}/bin/cconv-standalone -pr ${{github.workspace}}/depsfolder/checkedc-eval/ptrdist-1.1/bc
    
    - name: Test ft (PtrDist)
      run: |
        cd ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils/cc_conv
        python convert_project.py --includeDir ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc/include -p ${{runner.workspace}}/${{env.builddir}}/bin/cconv-standalone -pr ${{github.workspace}}/depsfolder/checkedc-eval/ptrdist-1.1/ft
    
    - name: Test ks (PtrDist)
      run: |
        cd ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils/cc_conv
        python convert_project.py --includeDir ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc/include -p ${{runner.workspace}}/${{env.builddir}}/bin/cconv-standalone -pr ${{github.workspace}}/depsfolder/checkedc-eval/ptrdist-1.1/ks
    
    - name: Test yacr2 (PtrDist)
      run: |
        cd ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils/cc_conv
        python convert_project.py --includeDir ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc/include -p ${{runner.workspace}}/${{env.builddir}}/bin/cconv-standalone -pr ${{github.workspace}}/depsfolder/checkedc-eval/ptrdist-1.1/yacr2
    
    - name: Build libarchive
      run: |
        mkdir -p ${{runner.workspace}}/depsfolder/libarchive.obj
        cd ${{runner.workspace}}/depsfolder/libarchive.obj
        cmake -DCMAKE_C_FLAGS="-w" ${{github.workspace}}/depsfolder/checkedc-eval/libarchive
        bear make
    
    - name: Testing libarchive
      run: |
        cd ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils/cc_conv
        python convert_project.py --skip '/.*/test/.*' --skip '/.*/test_utils/.*' --includeDir ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc/include -p ${{runner.workspace}}/${{env.builddir}}/bin/cconv-standalone -pr ${{runner.workspace}}/depsfolder/libarchive.obj
        
    - name: Build zlib
      run: |
        mkdir -p ${{runner.workspace}}/depsfolder/zlib.obj
        cd ${{runner.workspace}}/depsfolder/zlib.obj
        cmake -DCMAKE_C_FLAGS="-w" ${{github.workspace}}/depsfolder/checkedc-eval/zlib
        bear make
    
    - name: Testing zlib
      run: |
        cd ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils/cc_conv
        python convert_project.py --skip '/.*/test/.*' --includeDir ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc/include -p ${{runner.workspace}}/${{env.builddir}}/bin/cconv-standalone -pr ${{runner.workspace}}/depsfolder/zlib.obj
      
    - name: Build libtiff
      run: |
        mkdir -p ${{runner.workspace}}/depsfolder/libtiff.obj
        cd ${{runner.workspace}}/depsfolder/libtiff.obj
        cmake -DCMAKE_C_FLAGS="-w" ${{github.workspace}}/depsfolder/checkedc-eval/libtiff
        bear make
    
    - name: Testing libtiff
      run: |
        cd ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils/cc_conv
        python convert_project.py --skip '/.*/tif_stream.cxx' --includeDir ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc/include -p ${{runner.workspace}}/${{env.builddir}}/bin/cconv-standalone -pr ${{runner.workspace}}/depsfolder/libtiff.obj
    
    - name: Build lua
      run: |
        cd ${{github.workspace}}/depsfolder/checkedc-eval/lua
        bear make linux
    
    - name: Testing lua
      run: |
        cd ${{github.workspace}}/depsfolder/checkedc-clang/clang/tools/cconv-standalone/utils/cc_conv
        python convert_project.py --includeDir ${{github.workspace}}/depsfolder/checkedc-clang/llvm/projects/checkedc-wrapper/checkedc/include -p ${{runner.workspace}}/${{env.builddir}}/bin/cconv-standalone -pr ${{github.workspace}}/depsfolder/checkedc-eval/lua
